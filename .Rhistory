t.test(train$PSQI, test$PSQI)$statistic,
t.test(train$BDI, test$BDI)$statistic,
t.test(train$BIS_total, test$BIS_total)$statistic,
t.test(train$BAI, test$BAI)$statistic,
t.test(train$craving_score, test$craving_score)$statistic
),
p_value = c(
t.test(train$age, test$age)$p.value,
t.test(train$edu_years, test$edu_years)$p.value,
t.test(train$addiction_years, test$addiction_years)$p.value,
t.test(train$dose_month, test$dose_month)$p.value,
t.test(train$withdraw_day, test$withdraw_day)$p.value,
t.test(train$DSM, test$DSM)$p.value,
t.test(train$PSQI, test$PSQI)$p.value,
t.test(train$BDI, test$BDI)$p.value,
t.test(train$BIS_total, test$BIS_total)$p.value,
t.test(train$BAI, test$BAI)$p.value,
t.test(train$craving_score, test$craving_score)$p.value
)
)
return(summary)
}
# Get the summary and t-test results
final_table <- summarize_and_test(data_train, data_test)
# Create the table
kable(final_table, format = "html", col.names = c("Variable", "Training (n=144)", "Test (n=47)", "t-value", "p-value")) %>%
kable_styling(full_width = FALSE, position = "left")
# Add a column to distinguish between training and test sets
data_train$Set <- "Training"
data_test$Set <- "Test"
# Combine the data
combined_data <- bind_rows(data_train, data_test)
# Function to calculate mean, SD, t-value, and p-value
calculate_statistics <- function(data, variable) {
summary_stats <- data %>%
group_by(Set) %>%
summarise(
mean = mean(get(variable), na.rm = TRUE),
sd = sd(get(variable), na.rm = TRUE)
)
t_test <- t.test(data[[variable]] ~ data$Set, var.equal = FALSE)
t_value <- t_test$statistic
p_value <- t_test$p.value
result <- data.frame(
Variable = variable,
Training = paste0(round(summary_stats$mean[summary_stats$Set == "Training"], 2), " (", round(summary_stats$sd[summary_stats$Set == "Training"], 2), ")"),
Test = paste0(round(summary_stats$mean[summary_stats$Set == "Test"], 2), " (", round(summary_stats$sd[summary_stats$Set == "Test"], 2), ")"),
t_value = round(t_value, 2),
p_value = round(p_value, 2)
)
return(result)
}
# List of variables to summarize
variables <- c("age", "edu_years", "addiction_years", "dose_month", "withdraw_day", "DSM", "PSQI", "BDI", "BIS_total", "BAI", "craving_score")
# Calculate statistics for each variable and combine into a single data frame
summary_table <- do.call(rbind, lapply(variables, calculate_statistics, data = combined_data))
# Create the table
kable(summary_table, format = "html", col.names = c("Variable", "Training (n=144)", "Test (n=47)", "t-value", "p-value")) %>%
kable_styling(full_width = FALSE, position = "left")
t_test <- t.test(data[[variable]] ~ data$Set, var.equal = TRUE)
# Add a column to distinguish between training and test sets
data_train$Set <- "Training"
data_test$Set <- "Test"
# Combine the data
combined_data <- bind_rows(data_train, data_test)
# Function to calculate mean, SD, t-value, and p-value
calculate_statistics <- function(data, variable) {
summary_stats <- data %>%
group_by(Set) %>%
summarise(
mean = mean(get(variable), na.rm = TRUE),
sd = sd(get(variable), na.rm = TRUE)
)
t_test <- t.test(data[[variable]] ~ data$Set, var.equal = TRUE)
t_value <- t_test$statistic
p_value <- t_test$p.value
result <- data.frame(
Variable = variable,
Training = paste0(round(summary_stats$mean[summary_stats$Set == "Training"], 2), " (", round(summary_stats$sd[summary_stats$Set == "Training"], 2), ")"),
Test = paste0(round(summary_stats$mean[summary_stats$Set == "Test"], 2), " (", round(summary_stats$sd[summary_stats$Set == "Test"], 2), ")"),
t_value = round(t_value, 2),
p_value = round(p_value, 2)
)
return(result)
}
# List of variables to summarize
variables <- c("age", "edu_years", "addiction_years", "dose_month", "withdraw_day", "DSM", "PSQI", "BDI", "BIS_total", "BAI", "craving_score")
# Calculate statistics for each variable and combine into a single data frame
summary_table <- do.call(rbind, lapply(variables, calculate_statistics, data = combined_data))
# Create the table
kable(summary_table, format = "html", col.names = c("Variable", "Training (n=144)", "Test (n=47)", "t-value", "p-value")) %>%
kable_styling(full_width = FALSE, position = "left")
# Add a column to distinguish between training and test sets
data_train$Set <- "Training"
data_test$Set <- "Test"
# Combine the data
combined_data <- bind_rows(data_train, data_test)
# Function to calculate mean, SD, t-value, and p-value
calculate_statistics <- function(data, variable) {
summary_stats <- data %>%
group_by(Set) %>%
summarise(
mean = mean(get(variable), na.rm = TRUE),
sd = sd(get(variable), na.rm = TRUE)
)
t_test <- t.test(data[[variable]] ~ data$Set, var.equal = FALSE)
t_value <- t_test$statistic
p_value <- t_test$p.value
result <- data.frame(
Variable = variable,
Training = paste0(round(summary_stats$mean[summary_stats$Set == "Training"], 2), " (", round(summary_stats$sd[summary_stats$Set == "Training"], 2), ")"),
Test = paste0(round(summary_stats$mean[summary_stats$Set == "Test"], 2), " (", round(summary_stats$sd[summary_stats$Set == "Test"], 2), ")"),
t_value = round(t_value, 2),
p_value = round(p_value, 2)
)
return(result)
}
# List of variables to summarize
variables <- c("age", "edu_years", "addiction_years", "dose_month", "withdraw_day", "DSM", "PSQI", "BDI", "BIS_total", "BAI", "craving_score")
# Calculate statistics for each variable and combine into a single data frame
summary_table <- do.call(rbind, lapply(variables, calculate_statistics, data = combined_data))
# Create the table
kable(summary_table, format = "html", col.names = c("Variable", "Training (n=144)", "Test (n=47)", "t-value", "p-value")) %>%
kable_styling(full_width = FALSE, position = "left")
result <- data.frame(
Variable = variable,
Training = paste0(round(summary_stats$mean[summary_stats$Set == "Training"], 2), " (", round(summary_stats$sd[summary_stats$Set == "Training"], 2), ")"),
Test = paste0(round(summary_stats$mean[summary_stats$Set == "Test"], 2), " (", round(summary_stats$sd[summary_stats$Set == "Test"], 2), ")"),
t_value = round(t_value, 2),
p_value = round(p_value, 3)
)
# Add a column to distinguish between training and test sets
data_train$Set <- "Training"
data_test$Set <- "Test"
# Combine the data
combined_data <- bind_rows(data_train, data_test)
# Function to calculate mean, SD, t-value, and p-value
calculate_statistics <- function(data, variable) {
summary_stats <- data %>%
group_by(Set) %>%
summarise(
mean = mean(get(variable), na.rm = TRUE),
sd = sd(get(variable), na.rm = TRUE)
)
t_test <- t.test(data[[variable]] ~ data$Set, var.equal = FALSE)
t_value <- t_test$statistic
p_value <- t_test$p.value
result <- data.frame(
Variable = variable,
Training = paste0(round(summary_stats$mean[summary_stats$Set == "Training"], 2), " (", round(summary_stats$sd[summary_stats$Set == "Training"], 2), ")"),
Test = paste0(round(summary_stats$mean[summary_stats$Set == "Test"], 2), " (", round(summary_stats$sd[summary_stats$Set == "Test"], 2), ")"),
t_value = round(t_value, 2),
p_value = round(p_value, 3)
)
return(result)
}
# List of variables to summarize
variables <- c("age", "edu_years", "addiction_years", "dose_month", "withdraw_day", "DSM", "PSQI", "BDI", "BIS_total", "BAI", "craving_score")
# Calculate statistics for each variable and combine into a single data frame
summary_table <- do.call(rbind, lapply(variables, calculate_statistics, data = combined_data))
# Create the table
kable(summary_table, format = "html", col.names = c("Variable", "Training (n=144)", "Test (n=47)", "t-value", "p-value")) %>%
kable_styling(full_width = FALSE, position = "left")
# Add a column to distinguish between training and test sets
data_train$Set <- "Training"
data_test$Set <- "Test"
# Combine the data
combined_data <- bind_rows(data_train, data_test)
# Function to calculate mean, SD, t-value, and p-value
calculate_statistics <- function(data, variable) {
summary_stats <- data %>%
group_by(Set) %>%
summarise(
mean = mean(get(variable), na.rm = TRUE),
sd = sd(get(variable), na.rm = TRUE)
)
t_test <- t.test(data[[variable]] ~ data$Set, var.equal = FALSE)
t_value <- t_test$statistic
p_value <- t_test$p.value
result <- data.frame(
Variable = variable,
Training = paste0(format(round(summary_stats$mean[summary_stats$Set == "Training"], 2), nsmall = 2), " (", format(round(summary_stats$sd[summary_stats$Set == "Training"], 2), nsmall = 2), ")"),
Test = paste0(format(round(summary_stats$mean[summary_stats$Set == "Test"], 2), nsmall = 2), " (", format(round(summary_stats$sd[summary_stats$Set == "Test"], 2), nsmall = 2), ")"),
t_value = format(round(t_value, 2), nsmall = 2),
p_value = format(round(p_value, 3), nsmall = 3)
)
return(result)
}
# List of variables to summarize
variables <- c("age", "edu_years", "addiction_years", "dose_month", "withdraw_day", "DSM", "PSQI", "BDI", "BIS_total", "BAI", "craving_score")
# Calculate statistics for each variable and combine into a single data frame
summary_table <- do.call(rbind, lapply(variables, calculate_statistics, data = combined_data))
# Create the table
kable(summary_table, format = "html", col.names = c("Variable", "Training (n=144)", "Test (n=47)", "t-value", "p-value")) %>%
kable_styling(full_width = FALSE, position = "left")
# Create the table
kable(summary_table, format = "html", col.names = c("Variable", "Training (n=144)", "Test (n=47)", "t-value", "p-value")) %>%
kable_styling(full_width = FALSE, position = "left")
# Add a column to distinguish between training and test sets
data_train$Set <- "Training"
data_test$Set <- "Test"
# Combine the data
combined_data <- bind_rows(data_train, data_test)
# Function to calculate mean, SD, t-value, and p-value
calculate_statistics <- function(data, variable) {
summary_stats <- data %>%
group_by(Set) %>%
summarise(
mean = mean(get(variable), na.rm = TRUE),
sd = sd(get(variable), na.rm = TRUE)
)
t_test <- t.test(data[[variable]] ~ data$Set, var.equal = FALSE)
t_value <- t_test$statistic
p_value <- t_test$p.value
result <- data.frame(
Variable = variable,
Training = paste0(format(round(summary_stats$mean[summary_stats$Set == "Training"], 2), nsmall = 2), " (", format(round(summary_stats$sd[summary_stats$Set == "Training"], 2), nsmall = 2), ")"),
Test = paste0(format(round(summary_stats$mean[summary_stats$Set == "Test"], 2), nsmall = 2), " (", format(round(summary_stats$sd[summary_stats$Set == "Test"], 2), nsmall = 2), ")"),
t_value = format(round(t_value, 3), nsmall = 3),
p_value = format(round(p_value, 3), nsmall = 3)
)
return(result)
}
# List of variables to summarize
variables <- c("age", "edu_years", "addiction_years", "dose_month", "withdraw_day", "DSM", "PSQI", "BDI", "BIS_total", "BAI", "craving_score")
# Calculate statistics for each variable and combine into a single data frame
summary_table <- do.call(rbind, lapply(variables, calculate_statistics, data = combined_data))
# Create the table
kable(summary_table, format = "html", col.names = c("Variable", "Training (n=144)", "Test (n=47)", "t-value", "p-value")) %>%
kable_styling(full_width = FALSE, position = "left")
# Add a column to distinguish between training and test sets
data_train$Set <- "Training"
data_test$Set <- "Test"
# Combine the data
combined_data <- bind_rows(data_train, data_test)
# Function to calculate mean, SD, t-value, and p-value
calculate_statistics <- function(data, variable) {
summary_stats <- data %>%
group_by(Set) %>%
summarise(
mean = mean(get(variable), na.rm = TRUE),
sd = sd(get(variable), na.rm = TRUE)
)
t_test <- t.test(data[[variable]] ~ data$Set, var.equal = FALSE)
t_value <- t_test$statistic
p_value <- t_test$p.value
result <- data.frame(
Variable = variable,
Training = paste0(format(round(summary_stats$mean[summary_stats$Set == "Training"], 2), nsmall = 2), " (", format(round(summary_stats$sd[summary_stats$Set == "Training"], 2), nsmall = 2), ")"),
Test = paste0(format(round(summary_stats$mean[summary_stats$Set == "Test"], 2), nsmall = 2), " (", format(round(summary_stats$sd[summary_stats$Set == "Test"], 2), nsmall = 2), ")"),
t_value = format(round(t_value, 2), nsmall = 2),
p_value = format(round(p_value, 3), nsmall = 3)
)
return(result)
}
# List of variables to summarize
variables <- c("age", "edu_years", "addiction_years", "dose_month", "withdraw_day", "DSM", "PSQI", "BDI", "BIS_total", "BAI", "craving_score")
# Calculate statistics for each variable and combine into a single data frame
summary_table <- do.call(rbind, lapply(variables, calculate_statistics, data = combined_data))
# Create the table
kable(summary_table, format = "html", col.names = c("Variable", "Training (n=144)", "Test (n=47)", "t-value", "p-value")) %>%
kable_styling(full_width = FALSE, position = "left")
format(round(0.1589, 3), nsmall = 3)
format(round(0.1509, 3), nsmall = 3)
format(round(0.1509, 2), nsmall = 2)
# Perform correlation tests
variables_to_test <- c("methamphetamine_per_day", "PSQI", "age", "education_years", "years_regular_Meth_use", "withdraw_day")
results <- list()
for (var in variables_to_test) {
corr_test <- cor.test(data_train$craving_score, data_train[[var]], method = "pearson")
results[[var]] <- list(correlation = corr_test$estimate, p_value = corr_test$p.value)
}
# Perform correlation tests
variables_to_test <- c("methamphetamine_per_day", "PSQI", "age", "education_years", "years_regular_Meth_use", "withdraw_day")
results <- list()
for (var in variables_to_test) {
corr_test <- cor.test(data_train$craving_score, data_train[[var]], method = "pearson")
results[[var]] <- list(correlation = corr_test$estimate, p_value = corr_test$p.value)
}
for (var in variables_to_test) {
if (is.numeric(data_train_filtered[[var]])) {
corr_test <- cor.test(data_train_filtered$craving_score, data_train_filtered[[var]], method = "pearson")
results[[var]] <- list(correlation = corr_test$estimate, p_value = corr_test$p.value)
} else {
results[[var]] <- list(correlation = NA, p_value = NA)
}
}
for (var in variables_to_test) {
if (is.numeric(data_train[[var]])) {
corr_test <- cor.test(data_train$craving_score, data_train_filtered[[var]], method = "pearson")
results[[var]] <- list(correlation = corr_test$estimate, p_value = corr_test$p.value)
} else {
results[[var]] <- list(correlation = NA, p_value = NA)
}
}
for (var in variables_to_test) {
if (is.numeric(data_train[[var]])) {
corr_test <- cor.test(data_train$craving_score, data_train[[var]], method = "pearson")
results[[var]] <- list(correlation = corr_test$estimate, p_value = corr_test$p.value)
} else {
results[[var]] <- list(correlation = NA, p_value = NA)
}
}
for (var in variables_to_test) {
if (is.numeric(data_train[[var]])) {
corr_test <- cor.test(data_train$craving_score, data_train[[var]], method = "pearson")
results[[var]] <- list(correlation = corr_test$estimate, p_value = corr_test$p.value)
} else {
results[[var]] <- list(correlation = NA, p_value = NA)
}
}
# Perform correlation tests and store results
results <- lapply(variables_to_test, function(var) {
if (is.numeric(data_train[[var]])) {
# Perform the correlation test with NA handling
corr_test <- cor.test(data_train$craving_score, data_train[[var]], method = "pearson", use = "complete.obs")
return(list(correlation = round(corr_test$estimate, 2), p_value = round(corr_test$p.value, 3)))
} else {
return(list(correlation = NA, p_value = NA))
}
})
# Convert results to a dataframe
results_df <- data.frame(
Variable = variables_to_test,
Correlation = sapply(results, function(x) x$correlation),
P_value = sapply(results, function(x) x$p_value)
)
# Print results
print(results_df)
# Define variables to test
variables_to_test <- c("methamphetamine_per_day", "PSQI", "age", "education_years", "years_regular_Meth_use", "withdraw_day")
# Filter only numeric columns
variables_to_test <- variables_to_test[sapply(data_train[variables_to_test], is.numeric)]
# Define variables to test
variables_to_test <- c("methamphetamine_per_day", "PSQI", "age", "education_years", "years_regular_Meth_use", "withdraw_day")
# Filter only numeric columns
variables_to_test <- variables_to_test[sapply(data_train[variables_to_test], is.numeric)]
View(summary_train)
# Define variables to test
variables_to_test <- c("Methamphetamine_per_day", "PSQI", "age", "Education_years", "Years_regular_Meth_use", "withdraw_day")
# Filter only numeric columns
variables_to_test <- variables_to_test[sapply(data_train[variables_to_test], is.numeric)]
print(colnames(data_train))
View(summary_train)
setwd("E:/research_data/Methamphetamine_ERP_EGI/CPM_EEG_craving")
# Load necessary libraries
library(readxl)
library(dplyr)
library(knitr)
library(kableExtra)
# Load the data from the Excel file
data_train <- read_excel('data/all_data_2024.xlsx', sheet = "Training")
data_test <- read_excel("data/all_data_2024.xlsx", sheet = "Test")
# Print column names to check for discrepancies
print(colnames(data_train))
# Define variables to test
variables_to_test <- c("methamphetamine_per_day", "PSQI", "age", "education_years", "years_regular_Meth_use", "withdraw_day")
# Ensure that variables to test are in the dataset
variables_to_test <- variables_to_test[variables_to_test %in% colnames(data_train)]
# Perform correlation tests and store results
results <- lapply(variables_to_test, function(var) {
corr_test <- cor.test(data_train$craving_score, data_train[[var]], method = "pearson", use = "complete.obs")
return(list(correlation = round(corr_test$estimate, 2), p_value = round(corr_test$p.value, 3)))
})
# Convert results to a dataframe
results_df <- data.frame(
Variable = variables_to_test,
Correlation = sapply(results, function(x) x$correlation),
P_value = sapply(results, function(x) x$p_value)
)
# Print results
print(results_df)
# Print column names to check for discrepancies
print(colnames(data_train))
# Print column names to check for discrepancies
print(colnames(data_train))
# Define variables to test
variables_to_test <- c("age","edu_years","addiction_years", "withdraw_day",    "dose_month","craving_score","DSM","PSQI","BDI","BIS_total","BAI")
# Ensure that variables to test are in the dataset
variables_to_test <- variables_to_test[variables_to_test %in% colnames(data_train)]
# Perform correlation tests and store results
results <- lapply(variables_to_test, function(var) {
corr_test <- cor.test(data_train$craving_score, data_train[[var]], method = "pearson", use = "complete.obs")
return(list(correlation = round(corr_test$estimate, 2), p_value = round(corr_test$p.value, 3)))
})
# Convert results to a dataframe
results_df <- data.frame(
Variable = variables_to_test,
Correlation = sapply(results, function(x) x$correlation),
P_value = sapply(results, function(x) x$p_value)
)
# Print results
print(results_df)
# Define the columns to include in the correlation matrix
columns_to_include <- c("age","edu_years","addiction_years", "withdraw_day",    "dose_month","craving_score","DSM","PSQI","BDI","BIS_total","BAI")
# Ensure these columns exist in the dataset
columns_to_include <- columns_to_include[columns_to_include %in% colnames(data_train)]
# Select the columns to create the correlation matrix
data_to_correlate <- data_train %>% select(all_of(columns_to_include))
# Create the correlation matrix using complete observations
correlation_matrix <- cor(data_to_correlate, use = "complete.obs")
# Print the correlation matrix
print(correlation_matrix)
# Load additional library for visualization
library(ggcorrplot)
install.packages("ggcorrplot")
# Load additional library for visualization
#install.packages("ggcorrplot")
library(ggcorrplot)
# Plot the correlation matrix
ggcorrplot(correlation_matrix, lab = TRUE)
# Print the correlation matrix
print(correlation_matrix)
library(Hmisc)
library(Hmisc)
# Define the columns to include in the correlation matrix
columns_to_include <- c("age","edu_years","addiction_years", "withdraw_day",    "dose_month","craving_score","DSM","PSQI","BDI","BIS_total","BAI")
# Ensure these columns exist in the dataset
columns_to_include <- columns_to_include[columns_to_include %in% colnames(data_train)]
# Select the columns to perform the correlation analysis
data_to_correlate <- data_train %>% select(all_of(columns_to_include))
# Perform the Pearson correlation analysis
correlation_results <- rcorr(as.matrix(data_to_correlate), type = "pearson")
# Extract the correlation coefficients (r values)
correlation_matrix <- correlation_results$r
# Extract the p-values
p_value_matrix <- correlation_results$P
# Print the correlation coefficients
print("Correlation Coefficients (r values):")
print(correlation_matrix)
# Print the p-values
print("P-values:")
print(p_value_matrix)
# Extract the p-values
p_value_matrix <- format(correlation_results$P,3)
# Print the p-values
print("P-values:")
print(p_value_matrix)
round(0.315,2)
# Extract the correlation coefficients (r values) and round to 3 decimal places
correlation_matrix <- round(correlation_results$r, 3)
# Extract the p-values and round to 3 decimal places
p_value_matrix <- round(correlation_results$P, 3)
# Print the correlation coefficients
print("Correlation Coefficients (r values):")
print(correlation_matrix)
# Print the p-values
print("P-values:")
print(p_value_matrix)
library(Hmisc)
# Define the columns to include in the correlation matrix
columns_to_include <- c("age","edu_years","addiction_years", "withdraw_day",    "dose_month","craving_score","DSM","PSQI","BDI","BIS_total","BAI")
# Ensure these columns exist in the dataset
columns_to_include <- columns_to_include[columns_to_include %in% colnames(data_train)]
# Select the columns to perform the correlation analysis
data_to_correlate <- data_train %>% select(all_of(columns_to_include))
# Perform the Pearson correlation analysis
correlation_results <- rcorr(as.matrix(data_to_correlate), type = "pearson")
# Extract the correlation coefficients (r values) and round to 3 decimal places
correlation_matrix <- round(correlation_results$r, 3)
# Extract the p-values and round to 3 decimal places
p_value_matrix <- round(correlation_results$P, 3)
# Print the correlation coefficients
print("Correlation Coefficients (r values):")
print(correlation_matrix)
# Print the p-values
print("P-values:")
print(p_value_matrix)
View(correlation_matrix)
print(correlation_matrix$craving)
print(correlation_matrix["craving_score",])
print(correlation_matrix["craving_score",])
library(Hmisc)
# Define the columns to include in the correlation matrix
columns_to_include <- c("age","edu_years","addiction_years", "withdraw_day",    "dose_month","craving_score","DSM","PSQI","BDI","BIS_total","BAI")
# Ensure these columns exist in the dataset
columns_to_include <- columns_to_include[columns_to_include %in% colnames(data_train)]
# Select the columns to perform the correlation analysis
data_to_correlate <- data_train %>% select(all_of(columns_to_include))
# Perform the Pearson correlation analysis
correlation_results <- rcorr(as.matrix(data_to_correlate), type = "pearson")
# Extract the correlation coefficients (r values) and round to 3 decimal places
correlation_matrix <- round(correlation_results$r, 3)
# Extract the p-values and round to 3 decimal places
p_value_matrix <- round(correlation_results$P, 3)
# Print the correlation coefficients
print("Correlation Coefficients (r values):")
print(correlation_matrix["craving_score",])
# Print the p-values
print("P-values:")
print(p_value_matrix["craving_score",])
# Extract the correlation coefficients (r values) and round to 3 decimal places
correlation_matrix <- round(correlation_results$r, 2)
library(Hmisc)
# Define the columns to include in the correlation matrix
columns_to_include <- c("age","edu_years","addiction_years", "withdraw_day",    "dose_month","craving_score","DSM","PSQI","BDI","BIS_total","BAI")
# Ensure these columns exist in the dataset
columns_to_include <- columns_to_include[columns_to_include %in% colnames(data_train)]
# Select the columns to perform the correlation analysis
data_to_correlate <- data_train %>% select(all_of(columns_to_include))
# Perform the Pearson correlation analysis
correlation_results <- rcorr(as.matrix(data_to_correlate), type = "pearson")
# Extract the correlation coefficients (r values) and round to 3 decimal places
correlation_matrix <- round(correlation_results$r, 2)
# Extract the p-values and round to 3 decimal places
p_value_matrix <- round(correlation_results$P, 3)
# Print the correlation coefficients
print("Correlation Coefficients with craving (r values):")
print(correlation_matrix["craving_score",])
# Print the p-values
print("P-values with craving:")
print(p_value_matrix["craving_score",])
